from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain_core.messages import SystemMessage
from config import OPENAI_API_KEY, OPENAI_MODEL

import json
import logging
import re

logger = logging.getLogger(__name__)

"""
Module for humanizing and formatting assistant responses for a banking chatbot.
This module uses OpenAI's language model to convert raw responses into a more
human-readable format, breaking them into smaller conversational parts.
"""


class ResponseHumanizer:
    def __init__(self, raw_response: str):
        self.raw_response = raw_response

        self.llm = ChatOpenAI(
            temperature=0.5,
            model=OPENAI_MODEL,
            openai_api_key=OPENAI_API_KEY,
        )

        prompt_template = """
            Tenes que humanizar una respuesta de asistente bancario y dividirla en partes conversacionales naturales.

            1. Humaniza la conversacion para que suene natural, clara y fluida.  
            2. Elimin√° los signos de apertura como "¬°" y "¬ø", pero conserv√° los de cierre "!" y "?".  
            3. Divid√≠ el texto en hasta 4 partes llamadas parte_1, parte_2, parte_3 y parte_4.  
            Cada parte debe ser una unidad de sentido. No cortes frases.  
            Si no hay suficiente contenido, dej√° vac√≠as las partes que no se usen.

            Si el contenido es una lista estructurada de movimientos o pr√©stamos, aplic√° estos formatos:

            Para movimientos bancarios:
            üßæ √öltimos movimientos:
            üìÖ [fecha]  
            ‚¨ÜÔ∏è Ingreso ¬∑ $ [monto]  
            ‚¨áÔ∏è Egreso ¬∑ $ [monto]

            Para historial de pr√©stamos simulados:
            üßæ Historial de pr√©stamos simulados:
            Pr√©stamo 1:  
            üí∞ Monto: $ [monto]  
            üìÜ Plazo: [meses] meses  
            üßæ Cuota mensual: $ [cuota]  
            üî¢ Total a pagar: $ [total]  
            üìÖ Fecha: [fecha]

            Para simulaci√≥n de pr√©stamo individual:
            üßæ Simulaci√≥n de pr√©stamo:

            üí∞ Monto solicitado: $ [monto]  
            üìÜ Plazo en meses: [meses]  
            üßæ Valor cuota: $ [cuota]  
            üî¢ Total a pagar: $ [total]  
            üí∏ Monto de intereses: $ [intereses]  
            üìÖ Fecha de simulaci√≥n: [fecha]

            Para resumen de perfil crediticio:

            üìä Resumen de perfil:
    
            üîç Nivel crediticio: [level]  
            üíº Ingresos mensuales estimados: $ [monthly_income]  
            ‚ö†Ô∏è Riesgo de cr√©dito: [risk]

            Para confirmaciones de simulaci√≥n antes de ejecutar:

            Si el mensaje incluye una confirmaci√≥n como:
            ‚ÄúPerfecto, para confirmar, usted quiere simular un pr√©stamo con un monto de 344.000 pesos uruguayos y pagarlo en 14 meses. ¬øEs correcto esto?‚Äù

            Divid√≠ el mensaje en partes l√≥gicas
            
            Si recib√≠s una frase como:  

            ‚ÄúSeg√∫n su perfil, usted califica como cliente de riesgo moderado con ingresos mensuales estimados en $75,000‚Äù  
            Deb√©s convertirla a este formato, agregando el t√≠tulo:

            üìä Resumen de perfil: 

            [frase original]

            Asegurate de usar salto de l√≠nea entre cada l√≠nea. No escribas todo seguido en una sola frase.

            Respond√© con un JSON v√°lido as√≠:
            {
            "parte_1": "...",
            "parte_2": "...",
            "parte_3": "...",
            "parte_4": "..."
            }
        """

        self.prompt = ChatPromptTemplate.from_messages(
            [SystemMessage(content=prompt_template), ("human", "{raw_response}")]
        )

    def rewrite(self) -> dict:
        try:
            chain = self.prompt | self.llm
            response = chain.invoke({"raw_response": self.raw_response}).content

            # using regex to find the first JSON-like block
            match = re.search(r"\{.*?\}", response, re.DOTALL)
            if not match:
                raise ValueError("No se encontr√≥ un bloque JSON en la respuesta")

            parsed = json.loads(match.group(0))
            return {
                "parte_1": parsed.get("parte_1", ""),
                "parte_2": parsed.get("parte_2", ""),
                "parte_3": parsed.get("parte_3", ""),
                "parte_4": parsed.get("parte_4", ""),
            }

        except Exception as e:
            logger.exception(f"[Humanizer] Failed to parse response: {e}")
            return {
                "parte_1": self.raw_response,
                "parte_2": "",
                "parte_3": "",
                "parte_4": "",
            }
